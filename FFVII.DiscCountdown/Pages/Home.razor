@page "/"
@using System.Timers

@if (IsInRangeOfChristmas())
{
    <Snowflakes/>
}
<div class="flex-c-t bg-img1 size2 where1 overlay1 where2 response2" style="background-image: url('@BackgroundImage');">
    <CoolibCountdown DiscsRemaining="@_discPrc" Days="_days" Hours="_hours" Minutes="_minutes" Seconds="_seconds"/>
</div>

<div class="size3 flex-col-sb flex-w p-l-25 p-r-25 p-t-25 p-b-10 respon1">
    <div class="wrap-pic1">
        <img src="/images/ff7_rebirth_tm_rgb_B.webp" alt="LOGO">
    </div>

    <div class="p-t-50 p-b-60 p-r-90">
        <p class="m1-txt1">FINAL FANTASY VII REBIRTH</p>
        <p class="m1-txt1">DISC COUNTDOWN</p>
        <p class="m1-txt2 p-b-36">RELEASE DATES:</p>
        <p class="m1-txt1">
            - FEBRUARY 29TH 2024 FOR THE PS5 <span>&#10003;</span><br>
            - JANUARY 23TH 2025 FOR THE PC
        </p>
        @if (_disksRemaining?.Count > 0)
        {
            <p class="m1-txt1 p-b-16">
                Remaining Time:
                @if (_disksRemaining?.Count > 0)
                {
                    <button @onclick="@(() => Modal?.Show<DisplayMessage>("What do you mean, \"discs\"?"))">@($"{_discPrc:0.00000} DISCS*")</button>
                    @* <span class="extra-time">@($"+ {totalSeconds} seconds.")</span> *@
                }
            </p>
        }

        <DiscsRemaining Data="_disksRemaining" DiscDegree="_discDegree" TotalSeconds="@_totalSeconds"/>
    </div>


    <Disclaimer/>
</div>

@code {
    [CascadingParameter] public IModalService? Modal { get; set; }

    private readonly DateTime _targetDate = new DateTime(2025, 1, 23);

    private int _hours, _minutes, _seconds, _days;
    private List<Disc>? _disksRemaining;
    private int _discDegree;
    private int _totalSeconds;
    private double? _discPrc;
    private readonly string[] _backgroundImages = ["/images/cloud_zack_sephiroth.webp", "/images/tifa_aerith_sepiroth.webp", "/images/FFVII_REBIRTH_December_Keyart_4x5.webp"];

    private int _currentIndex;
    private string BackgroundImage => _backgroundImages[_currentIndex];

    protected override void OnInitialized()
    {
        CalculateTimeRemaining();
        Timer timer = new(1000);
        timer.Elapsed += (_, _) => { CalculateTimeRemaining(); };
        timer.Start();
    }

    private void CalculateTimeRemaining()
    {
        _disksRemaining = CalculateDisksUntilDate(_targetDate);
        StateHasChanged();
    }

    private static bool IsInRangeOfChristmas()
    {
        DateTime currentDate = DateTime.Now;
        // Define the start and end dates for the Christmas range
        DateTime christmasStartDate = new DateTime(currentDate.Year, 12, 15);
        DateTime christmasEndDate = new DateTime(currentDate.Year, 1, 05);

        // Check if the current date is between Christmas Eve and Boxing Day
        return currentDate >= christmasStartDate || currentDate <= christmasEndDate;
    }

    private List<Disc>? CalculateDisksUntilDate(DateTime targetDate)
    {
        List<Disc> diskList = [];
        DateTime currentTime = DateTime.Now;
        const double hoursPerDisk = 50;

        // Calculate the hours remaining until the target date
        TimeSpan totalTimeSpan = targetDate - DateTime.Now;
        double remainingHours = totalTimeSpan.TotalHours;

        int disksNeeded = (int)Math.Ceiling(remainingHours / hoursPerDisk);
        if (disksNeeded <= 0) return null;
        diskList.Add(new Disc { Index = 0, DateTime = targetDate });
        for (int i = 0; i < disksNeeded; i++)
        {
            DateTime diskTime = targetDate.AddHours(-1 * (i + 1) * hoursPerDisk);
            TimeSpan difference = currentTime - diskTime;
            if (difference > TimeSpan.FromSeconds(1)) continue;
            Disc curDisk = new()
            {
                Index = disksNeeded - i,
                DateTime = diskTime
            };
            diskList.Add(curDisk);
        }

        diskList = diskList.OrderBy(d => d.DateTime).ToList();


        TimeSpan currentDiskTime = diskList.First().DateTime - currentTime;

        if (_minutes > 0 && _minutes != currentDiskTime.Minutes)
        {
            _currentIndex = (_currentIndex + 1) % _backgroundImages.Length;
        }


        _days = totalTimeSpan.Days;
        _hours = totalTimeSpan.Hours;
        _minutes = totalTimeSpan.Minutes;
        _seconds = totalTimeSpan.Seconds;
        _discDegree = 360 - (int)(currentDiskTime.TotalMinutes / 8.3333333);
        _totalSeconds = (int)currentDiskTime.TotalSeconds;

        _discPrc = Math.Round(_totalSeconds / (hoursPerDisk * 3600), 5);
        if (diskList.Count > 1)
        {
            _discPrc += diskList.Count;
        }

        return diskList;
    }

}