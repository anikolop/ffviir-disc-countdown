@page "/Widget"
@using System.Timers

<div style="width:300px">

    <WidgetCounter DiscsRemaining="-1" Days="_days" Hours="_hours" Minutes="_minutes" Seconds="_seconds" />
    <div class="disc-grid-widget">
        <div class="disc-container">
            <img class="disk-icon" src="/images/ffviir-disc.webp" alt="@($"disk-1")" title="@($"{_totalSeconds}sec. remaining")" />
            <div class="disc-overlay" title="@($"{_totalSeconds}sec. remaining")" style="background: conic-gradient(#a72a2c 0 @($"{_discDegree}deg"), transparent 0 360deg);"></div>
        </div>
        @foreach (Disc disk in _disksRemaining ?? [])
        {
            <div class="disc-container">
                <img class="disk-icon" src="/images/ffviir-disc.webp" alt="@($"disk{disk.Index}")" title="@disk.DateTime.ToString("G")" />
            </div>

        }
    </div>
</div>

@code {
    private DateTime _targetDate = new DateTime(2024, 2, 29);
    private int _hours, _minutes, _seconds, _days;
    private List<Disc>? _disksRemaining;
    private int _totalSeconds;
    private double? _discPrc;
    private int _currentIndex = 0;
    private int _discDegree;

    protected override void OnInitialized()
    {
        CalculateTimeRemaining();
        Timer timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) => { CalculateTimeRemaining(); };
        timer.Start();
    }

    private void CalculateTimeRemaining()
    {
        _disksRemaining = CalculateDisksUntilDate(_targetDate);
        StateHasChanged();
    }

    private List<Disc> CalculateDisksUntilDate(DateTime targetDate)
    {
        List<Disc> diskList = [];
        DateTime currentTime = DateTime.Now;
        double hoursPerDisk = 50;

        // Calculate the hours remaining until the target date
        TimeSpan totalTimeSpan = targetDate - DateTime.Now;
        double remainingHours = totalTimeSpan.TotalHours;

        int disksNeeded = (int)Math.Ceiling(remainingHours / hoursPerDisk);

        for (int i = 0; i < disksNeeded; i++)
        {
            DateTime diskTime = targetDate.AddHours(-1 * (i + 1) * hoursPerDisk);

            if (currentTime - diskTime > TimeSpan.FromSeconds(1)) continue;
            Disc curDisk = new()
                {
                    Index = disksNeeded - i,
                    DateTime = diskTime
                };
            diskList.Add(curDisk);
        }

        diskList = diskList.OrderBy(d => d.DateTime).ToList();

        TimeSpan currentDiskTime = diskList.First().DateTime - currentTime;

        _days = (int)totalTimeSpan.Days;
        _hours = (int)totalTimeSpan.Hours;
        _minutes = totalTimeSpan.Minutes;
        _seconds = totalTimeSpan.Seconds;
        _discDegree = 360 - (int)(currentDiskTime.TotalMinutes / 8.3333333);
        _totalSeconds = (int)currentDiskTime.TotalSeconds;

        _discPrc = _disksRemaining?.Count + Math.Round(_totalSeconds / (hoursPerDisk * 3600), 5);
        return diskList;
    }

}